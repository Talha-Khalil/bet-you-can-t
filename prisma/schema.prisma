// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  profilePic String?
  challengesCreated Challenge[] @relation("ChallengesCreated")
  challengesReceived Challenge[] @relation("ChallengesReceived")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Notification Notification[]
}

model Challenge {
  id             String   @id @default(uuid())
  description    String
  charity        String?
  deadline       DateTime
  status         ChallengeStatus @default(PENDING)
  challengerId   String
  challengedId   String
  challenger     User @relation("ChallengesCreated", fields: [challengerId], references: [id])
  challenged     User @relation("ChallengesReceived", fields: [challengedId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  @@unique([challengerId, challengedId])
}

enum ChallengeStatus {
  PENDING
  ACCEPTED
  DECLINED
  ARCHIVED
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User @relation(fields: [userId], references: [id])
}

model Invitation {
  id         String   @id @default(uuid())
  email      String
  phone      String?
  status     InvitationStatus @default(PENDING)
  createdAt  DateTime @default(now())
  @@unique([email, phone])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}
